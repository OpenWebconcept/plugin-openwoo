openapi: 3.0.0
info:
    title: "OpenWebConcept OpenWOO API"
    termsOfService: "https://www.openwebconcept.nl/"
    contact:
        name: OpenWebConcept
        url: "https://www.openwebconcept.nl/"
        email: info@openwebconcept.nl
    license:
        name: OpenWebConcept
        url: "https://www.openwebconcept.nl/"
    version: 1.0.8
    x-logo:
        url: "https://openwebconcept.nl/wp-content/themes/openwebconcept/assets/src/images/logo-dark.png"
    description:
        $ref: ../chapters/description.md
    x-externalDocs:
        description: "Find out how to create Github repo for your OpenAPI spec."
        url: "https://openwebconcept.bitbucket.io/openwoo/"
servers:
    - url: "https://{site}/wp-json/yard/openwoo/v1"
      description: ""
paths:
    /items:
        get:
            tags:
                - API
            description: "Get all openWOO items"
            operationId: getItems
            parameters:
                - name: "filter[]"
                  in: query
                  description: "Filter items by date of modification"
                  required: false
                  schema:
                      type: array
                      items:
                          type: string
                      pattern: "updatedAfterDate:YYYY-MM-DD"
                  example: "updatedAfterDate:2021-03-01"
                - name: "filter[]"
                  in: query
                  description: "Filter items by date of publication"
                  required: false
                  schema:
                      type: array
                      items:
                          type: string
                      pattern: "publishedAfterDate:YYYY-MM-DD"
                  example: "publishedAfterDate:2021-03-01"
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Response"
    "/items/{UUID}":
        get:
            tags:
                - API
            description: "Get openWOO item by UUID"
            operationId: getItem
            parameters:
                - name: UUID
                  in: path
                  description: "UUID of OpenWOO item"
                  required: true
                  schema:
                      type: string
                      format: uuid
                  example: /36aea3a9-e1d8-407a-8ea3-4617856f97fc
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/OpenWOO"
                            examples:
                                "200":
                                    summary: ""
                                    value: { name: 1 }
                "404":
                    description: "OpenWOO not found"
                    content:
                        application/json:
                            schema:
                                type: object
components:
    schemas:
        OpenWOO:
            title: "OpenWOO model"
            type: object
        repository: {}
        Response:
            properties:
                WOOVerzoeken:
                    type: array
                    items:
                        $ref: "#/components/schemas/OpenWOO"
                pagination:
                    type: array
                    items: {}
                query_parameters: {}
            type: object
